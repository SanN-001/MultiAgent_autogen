import os
import json
import sqlite3
import autogen
from autogen import AssistantAgent, UserProxyAgent, GroupChat, GroupChatManager
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Constants
DATABASE_PATH = r'C:\Users\sanan\DP_Agents\Orders.db'
JSON_FILE_PATH = r'C:\Users\sanan\DP_Agents\metadata.json'

# LLM configuration
llm_config = {
    "timeout": 600,
    "cache_seed": 44,
    "config_list": [{"model": "gpt-3.5-turbo", "api_key": os.environ["OPENAI_API_KEY"]}],
    "temperature": 0
}

# Logging
logging_session_id = autogen.runtime_logging.start(config={"dbname": "empty_database.db"})
print("Logging session ID: " + str(logging_session_id))

# Termination condition function
termination_msg = lambda x: isinstance(x, dict) and "TERMINATE" == str(x.get("content", ""))[-9:].upper()

# Define agents
sales_rep = AssistantAgent(
    name="Sales_Rep",
    system_message="""You are a sales representative and market expert in understanding the sales pattern in a region and giving advice based on your knowledge.""",
    llm_config=llm_config,
    human_input_mode="NEVER",
)

manager_agent = AssistantAgent(
    name="Manager",
    system_message="Manager. You interact with the user and delegate tasks to other agents based on the queries received.",
    is_termination_msg=termination_msg,
    code_execution_config=False,
)

sqluser = AssistantAgent(
    name="SQLuser",
    system_message="SQLuser. Based on the question from the Boss and existing database and metadata, you create relevant SQLite queries.",
    is_termination_msg=termination_msg,
    code_execution_config=False,
    llm_config=llm_config,
)

analyst = AssistantAgent(
    name="Analyst",
    system_message="Analyst. You execute the queries generated by SQLuser, analyze the data, and provide results to the Manager for communication with the user.",
    is_termination_msg=termination_msg,
    code_execution_config=False,
    llm_config=llm_config,
)

def fetch_metadata(json_file_path: str) -> dict:
    with open(json_file_path, 'r') as file:
        metadata = json.load(file)
    return metadata

def fetch_table_details(table_name: str, database_path: str = DATABASE_PATH) -> dict:
    conn = sqlite3.connect(database_path)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    column_names = [col[1] for col in columns]
    primary_key = [col[1] for col in columns if col[5] == 1]
    cursor.execute(f"PRAGMA foreign_key_list({table_name})")
    foreign_keys = cursor.fetchall()
    conn.close()
    return {
        "table_name": table_name,
        "columns": column_names,
        "primary_key": primary_key,
        "foreign_keys": foreign_keys
    }

def execute_query(query: str, database_path: str = DATABASE_PATH) -> list:
    connection = sqlite3.connect(database_path)
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        results = cursor.fetchall()
        return results
    except Exception as e:
        return str(e)
    finally:
        cursor.close()
        connection.close()

# Register functions with agents
sqluser.register_for_llm(description="Fetch metadata from JSON file.", api_style="function")(fetch_metadata)
sqluser.register_for_llm(description="Fetch table details from SQLite database.", api_style="function")(fetch_table_details)
analyst.register_for_llm(description="Execute SQL queries on the SQLite database.", api_style="function")(execute_query)

# Register functions for execution with relevant agents
for executor in [manager_agent]:
    executor.register_for_execution()(fetch_metadata)
    executor.register_for_execution()(fetch_table_details)
    executor.register_for_execution()(execute_query)

def call_rag_chat(problem_statement):
    # Reset agents
    manager_agent.reset()
    sqluser.reset()
    analyst.reset()

    # Initialize GroupChat
    groupchat = GroupChat(
        agents=[manager_agent, sqluser, analyst],
        messages=[],
        max_round=12,
        speaker_selection_method="round_robin",
        allow_repeat_speaker=False,
    )

    manager = GroupChatManager(groupchat=groupchat, llm_config=llm_config)

    manager_agent.initiate_chat(manager, message=problem_statement)

def generate_sales_rep_questions(market_analysis, user_context):
    combined_context = f"{market_analysis} Based on this analysis, {user_context}"
    assistant = UserProxyAgent(
        name="assistant",
        human_input_mode="ALWAYS",
        system_message="You are a helpful assistant.",
        llm_config=llm_config,
        code_execution_config=False,
    )
    assistant.initiate_chat(sales_rep, message=combined_context)

# Example usage
if __name__ == "__main__":
    # Step 1: Analyze the market scenario
    problem_statement = "Analyze the market scenario for the Maharashtra region and identify key insights."
    call_rag_chat(problem_statement)

    # Assume market_analysis is the result of the above analysis
    market_analysis = "The analysis shows that the laptop sales in Maharashtra are low due to high competition and lower price margins."

    # Step 2: Generate questions for sales rep based on market analysis and user context
    user_context = "I am a wholesale seller. My most sold product is a laptop. I belong to the Maharashtra region. My sales are low. What are the ideal questions I should be asking to a sales representative?"
    generate_sales_rep_questions(market_analysis, user_context)
